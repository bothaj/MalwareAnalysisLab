using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using MySql.Data.MySqlClient;
using MalwareLabWeb.Models;
using Trirand.Web.Mvc;
using System.Globalization;

namespace MalwareLabWeb.Controllers
{
    public class HomeController : Controller
    {
        public ActionResult Index()
        {
            ViewBag.Message = "";

            string connStr = "Server= 146.64.212.101; Port=3306;Database=MalwareLab;Uid=root;Password=toor";

            MySqlConnection conn = new MySqlConnection(connStr);
            MySqlCommand command = conn.CreateCommand();
            command.CommandText = "SELECT idMalwareSamples, SamplesName, MachineName, IPAddress, OperatingSystem, dtCreate FROM MalwareSamples";
            try
            {
                conn.Open();
            }
            catch (Exception ex)
            {

            }

            MySqlDataReader reader_MalwareSample = command.ExecuteReader();

            List<MalwareSampleModel> MalwareSamples = new List<MalwareSampleModel>();

            while (reader_MalwareSample.Read())
            {
                MalwareSampleModel malwareSample = new MalwareSampleModel();
                malwareSample.idMalwareSamples = reader_MalwareSample["idMalwareSamples"].ToString().Replace("\n", "");
                malwareSample.SampleName = reader_MalwareSample["SamplesName"].ToString().Replace("\n", "");
                malwareSample.PCName = reader_MalwareSample["MachineName"].ToString().Replace("\n", "");
                malwareSample.IPAddress = reader_MalwareSample["IPAddress"].ToString().Replace("\n", "");
                malwareSample.OperatingSystem = reader_MalwareSample["OperatingSystem"].ToString().Replace("\n", "");
                malwareSample.dtCreate = FormatDate(reader_MalwareSample["dtCreate"].ToString().Replace("\n", ""));
                //malwareSample.HeaderTypes MalwareHeaderTypes = new List<MalwareHeaderTypeModel>();

                MalwareSamples.Add(malwareSample);                
            }

            reader_MalwareSample.Close();

            foreach (MalwareSampleModel malwareSample in MalwareSamples)
            {
                command.CommandText = "SELECT idMalwareActivityHeader, idMalwareSample, idMalwareCategory, Critical, Warning, Info, Ignored, dtTested, dtSnapshot FROM MalwareActivityHeaderType WHERE idMalwareSample=" + malwareSample.idMalwareSamples;

                MySqlDataReader reader_MalwareHeaderType = command.ExecuteReader();

                //malwareSample.HeaderTypes MalwareHeaderTypes = new List<MalwareHeaderTypeModel>();

                while (reader_MalwareHeaderType.Read())
                {
                    MalwareHeaderTypeModel malwareHeaderType = new MalwareHeaderTypeModel();
                    malwareHeaderType.idMalwareActivityHeader = reader_MalwareHeaderType["idMalwareActivityHeader"].ToString().Replace("\n", "");
                    malwareHeaderType.idMalwareSample = reader_MalwareHeaderType["idMalwareSample"].ToString().Replace("\n", "");
                    malwareHeaderType.Category = GetMalwareCategory(reader_MalwareHeaderType["idMalwareCategory"].ToString().Replace("\n", ""));
                    malwareHeaderType.Critical = reader_MalwareHeaderType["Critical"].ToString().Replace("\n", "");
                    malwareHeaderType.Warning = reader_MalwareHeaderType["Warning"].ToString().Replace("\n", "");
                    malwareHeaderType.Info = reader_MalwareHeaderType["Info"].ToString().Replace("\n", "");
                    malwareHeaderType.Ignored = reader_MalwareHeaderType["Ignored"].ToString().Replace("\n", "");

                    malwareHeaderType.dtTested = FormatDate(reader_MalwareHeaderType["dtTested"].ToString());
                    malwareHeaderType.dtSnapshot = FormatDate(reader_MalwareHeaderType["dtSnapshot"].ToString().Replace("\n", ""));

                    malwareSample.HeaderTypes.Add(malwareHeaderType);
                }
                reader_MalwareHeaderType.Close();
            }
            
            
            foreach (MalwareSampleModel malwareSample in MalwareSamples)
            {
                foreach (MalwareHeaderTypeModel malwareHeaderType in malwareSample.HeaderTypes)
                {
                    command.CommandText = "SELECT idMalwareActivityHeader, MalwareActivityHeaderType, HeaderName, Critical, Warning, Info, Ignored FROM malwareactivityheader WHERE MalwareActivityHeaderType=" + malwareHeaderType.idMalwareActivityHeader;

                    MySqlDataReader reader_MalwareHeader = command.ExecuteReader();

                    while (reader_MalwareHeader.Read())
                    {
                        MalwareHeaderModel malwareHeader = new MalwareHeaderModel();
                        malwareHeader.idMalwareActivityHeader = reader_MalwareHeader["idMalwareActivityHeader"].ToString().Replace("\n", "");
                        malwareHeader.MalwareActivityHeaderType = reader_MalwareHeader["MalwareActivityHeaderType"].ToString().Replace("\n", "");
                        malwareHeader.HeaderName = reader_MalwareHeader["HeaderName"].ToString().Replace("\n", "");
                        malwareHeader.Critical = reader_MalwareHeader["Critical"].ToString().Replace("\n", "");
                        malwareHeader.Warning = reader_MalwareHeader["Warning"].ToString().Replace("\n", "");
                        malwareHeader.Info = reader_MalwareHeader["Info"].ToString().Replace("\n", "");
                        malwareHeader.Ignored = reader_MalwareHeader["Ignored"].ToString().Replace("\n", "");

                        malwareHeaderType.MalwareHeaderModels.Add(malwareHeader);
                    }
                    reader_MalwareHeader.Close();
                }
            }

            foreach (MalwareSampleModel malwareSample in MalwareSamples)
            {
                foreach (MalwareHeaderTypeModel malwareHeaderType in malwareSample.HeaderTypes)
                {
                    foreach (MalwareHeaderModel malwareHeader in malwareHeaderType.MalwareHeaderModels)
                    {
                        command.CommandText = "SELECT idMalwareActivityDetail, idMalwareActivityHeader, ActivityDescription, ActivityName, NewValue, OldValue, Severity FROM malwareactivitydetail WHERE idMalwareActivityHeader=" + malwareHeader.idMalwareActivityHeader;

                        MySqlDataReader reader_MalwareHeaderDetail = command.ExecuteReader();

                        while (reader_MalwareHeaderDetail.Read())
                        {
                            MalwareHeaderDetailsModel malwareHeaderDetail = new MalwareHeaderDetailsModel();
                            malwareHeaderDetail.idMalwareActivityDetail = reader_MalwareHeaderDetail["idMalwareActivityDetail"].ToString().Replace("\n", "");
                            malwareHeaderDetail.idMalwareHeader = reader_MalwareHeaderDetail["idMalwareActivityHeader"].ToString().Replace("\n", "");
                            malwareHeaderDetail.ActivityDescription = reader_MalwareHeaderDetail["ActivityDescription"].ToString().Replace("\n", "");
                            malwareHeaderDetail.ActivityName = reader_MalwareHeaderDetail["ActivityName"].ToString().Replace("\n", "");
                            malwareHeaderDetail.ToValue = reader_MalwareHeaderDetail["NewValue"].ToString().Replace("\n", "");
                            malwareHeaderDetail.FromValue = reader_MalwareHeaderDetail["OldValue"].ToString().Replace("\n","");
                            malwareHeaderDetail.Severity = GetMalwareSeverity(reader_MalwareHeaderDetail["Severity"].ToString().Replace("\n", ""));

                            malwareHeader.MalwareHeaderDetailsModels.Add(malwareHeaderDetail);
                        }
                        reader_MalwareHeaderDetail.Close();
                    }
                }
            }

            return View(MalwareSamples);
        }

        string FormatDate(string strDate)
        {
            var formats = new string[] { "MM/dd/yy hh:mm:ss", "MM/dd/yyyy hh:mm:ss", "yyyy/MM/dd hh:mm:ss", "yy/MM/dd hh:mm:ss", "yyyy/MM/dd hh:mm:ss tt" };
            foreach (var f in formats)
            {
                try
                {
                    DateTime date = DateTime.ParseExact(strDate, f, CultureInfo.InvariantCulture);
                    return date.ToString("yyyy/MM/dd hh:mm:ss tt");
                }
                catch
                {                    
                }
            }

            return "";
        }

        string GetMalwareSeverity(string idMalwareSeverity)
        {
            switch (idMalwareSeverity)
            {
                case "1":
                    return "Critical";
                case "2":
                    return "Warning";
                case "3":
                    return "Info";
                case "4":
                    return "Ignored";
                default:
                    return "Unknown";
            }

        }

        string GetMalwareCategory(string idMalwareCategory)
        {
            switch (idMalwareCategory)
            {
                case "1":
                    return "Files";
                case "2":
                    return "Groups";
                case "3":
                    return "Registry";
                case "4":
                    return "Rights";
                case "5":
                    return "Schedular";
                case "6":
                    return "Services";
                case "7":
                    return "Shares";
                case "8":
                    return "System";
                case "9":
                    return "Users";
                case "10":
                    return "Volumes";
                case "11":
                    return "Network";
                case "12":
                    return "File Inspection";
                default:
                    return "Unknown";
            }             
        }

        public ActionResult About()
        {
            ViewBag.Message = "Your app description page.";

            return View();
        }

        public ActionResult Contact()
        {
            ViewBag.Message = "Your contact page.";

            return View();
        }
    }
}
